import json
import time
from multiprocessing import Process, Manager
import json
import requests
import time
# import pandas
from picamera import PiCamera

from collections import OrderedDict

# import picamera
import requests
import socket

from communication.stm32 import STMLink

class RaspberryPi:
    def __init__(self):
        self.stm_link = STMLink()

        # for sharing information between child processes
        manager = Manager()

        self.instructions = manager.dict()

        # define processes
        self.proc_recv_bluetooth = None
    def start(self):
        print("entered start")
        # establish bluetooth connection with Android
        hostMACAddress = 'B8:27:EB:FE:BC:B6' # The MAC address of a Bluetooth adapter on the server. The server might have multiple Bluetooth adapters.
        port = 1
        backlog = 1
        size = 1024
        s = socket.socket(socket.AF_BLUETOOTH, socket.SOCK_STREAM, socket.BTPROTO_RFCOMM)
        s.bind((hostMACAddress,port))
        s.listen(backlog)
        global client
        client, address = s.accept()
        print("Accepted connection from", client)

        # establish connection with STM32
        self.stm_link.connect()

        # define processes
        self.proc_recv_bluetooth = Process(target=self.recv_bluetooth)
        self.proc_recv_bluetooth.start()


            
    def recv_bluetooth(self) -> None:
        tempDict = dict()
        print("start waiting for android to send")
        while 1:
            print("in while loop for recieving positions")
            data = client.recv(1024)
            if data:
                print("DATA RECIEVED:", data)
                if(data.decode('utf-8') == "START"):
                    print("start")
                    self.recv_stm(self.instructions)
                print("Data recieved from android", data)
                inst = data.decode('utf-8')
                inst = inst.split(',')
                if inst[0] == 'ADDO':
                    print("adding obstacle")
                    tempDict[inst[1]] = inst[2:]
                elif inst[0] == 'DELO':
                    tempDict.pop(inst[1])
                elif inst [0] == 'ROBOT':
                    tempDict.update({inst[0]:inst[1:]})
                print(tempDict)
                print("length of tempDict", len(tempDict))
                print(type(tempDict))
                if (data.decode('utf-8') == 'find'): #send find here
                    #send obstacles dict to api call...
                    print("calling findPath API")
                    response = requests.post("http://192.168.1.16:5000/findPath", json=tempDict, verify=False) #pass android coordinates to algo
                    if (response.status_code == 200):
                        print ("dictionary recieved is",json.loads(response.content, object_pairs_hook=OrderedDict))
                        self.instructions = json.loads(response.content, object_pairs_hook=OrderedDict) #obtain data from algo as a type dict (convert json to dict)
                        print("path finding is done, ready to start", self.instructions)
                
                
                


    def recv_stm(self, inst) -> None:
        """
        Receive acknowledgement messages from STM32, and release the movement lock
        """
        print("start stm")
#         self.instructions = {'1': ['3', '7', 'N'], '2': ['6', '4', 'N'], '3': ['2', '8', 'N']}
        while 1:
            print("waiting for start")
            if len(inst) > 1:
                for i in inst:
                    print("key value is", i)
                    for j in inst[i]:
                        self.stm_link.send(j)
                        print("sending inst to stm", j)
                    print("awaiting K")
                    message :str = self.stm_link.recv()
                    #imgCounter = 1
                    print("message is", message)
                    print("type of:", type(message))
                    if message == 'K':
                        print("taking photo now")
                        camera = PiCamera()
                        time.sleep(2)
                        image = camera.capture('./img.jpg')
                        image = './img.jpg'
                        camera.close()
                        response = requests.post('http://192.168.1.16:5000/predictImage', files={'file': open(image, 'rb')})
                        if response.status_code == 200:
                            predictedList = []
                            for k in json.loads(response.content):
                                if k["name"] != '10':
                                    if len(predictedList) == 0:
                                        predictedList = k
                                    else:
                                        if k["confidence"] > predictedList["confidence"]:
                                            predictedList = k
                            # send predicted image id to android
                            if predictedList != []:
                                 print("recognised image", predictedList["name"])
                                 print("sending to android: TARGET,",i, predictedList["name"])
                                 client.send("TARGET,{},{}.".format(i,predictedList["name"]).encode())
                            else:
                                 print("no image recognised, moving on...")
                    #imgCounter += 1
                print("done with path, stitching image now")            
                response2 = requests.get('http://192.168.1.16:5000/stitchImage')
                if response2.status_code == 200:
                   # client.send("done with image rec".encode())
                    print("DONE WITH STITCHING")
                    break
                    #close everything
                        

if __name__ == "__main__":
    rpi = RaspberryPi()
    print("start") 
    rpi.start()
